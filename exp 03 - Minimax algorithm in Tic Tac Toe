#Minimax Algorithm 
PLAYER_X = 1
PLAYER_O = -1
EMPTY = 0

def evaluate(board):
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != EMPTY:
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != EMPTY:
            return board[0][i]
    if board[0][0] == board[1][1] == board[2][2] != EMPTY or \
       board[0][2] == board[1][1] == board[2][0] != EMPTY:
        return board[1][1]
    return 0

def isMovesLeft(board):
    return any(cell == EMPTY for row in board for cell in row)

def minimax(board, isMax):
    score = evaluate(board)
    if score or not isMovesLeft(board):
        return score

    best = -float('inf') if isMax else float('inf')
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X if isMax else PLAYER_O
                val = minimax(board, not isMax)
                board[i][j] = EMPTY
                best = max(best, val) if isMax else min(best, val)
    return best

def findBestMove(board):
    bestVal = -float('inf')
    bestMove = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X
                moveVal = minimax(board, False)
                board[i][j] = EMPTY
                if moveVal > bestVal:
                    bestVal = moveVal
                    bestMove = (i, j)
    return bestMove

def printBoard(board):
    print("\n".join(" ".join("X" if c == 1 else "O" if c == -1 else "." for c in row) for row in board))

board = [
    [PLAYER_X, PLAYER_O, PLAYER_X],
    [PLAYER_O, PLAYER_X, EMPTY],
    [EMPTY, PLAYER_O, PLAYER_X]
]

print("Current Board:")
printBoard(board)
move = findBestMove(board)
board[move[0]][move[1]] = PLAYER_X
print("\nAfter Best Move:")
printBoard(board)
