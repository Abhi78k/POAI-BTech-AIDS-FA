#A* search
import heapq

class Node:
    def __init__(self, state, parent, g, h):
        self.state, self.parent, self.g, self.h = state, parent, g, h
        self.f = g + h
    def __lt__(self, other): return self.f < other.f

def a_star(start, goal, heuristic, neighbors):
    open_list = [Node(start, None, 0, heuristic(start, goal))]
    closed = set()

    while open_list:
        current = heapq.heappop(open_list)
        if current.state == goal:
            path = []
            while current: path.append(current.state); current = current.parent
            return path[::-1]
        closed.add(current.state)
        for neighbor, cost in neighbors(current.state):
            if neighbor in closed: continue
            g = current.g + cost
            h = heuristic(neighbor, goal)
            neighbor_node = Node(neighbor, current, g, h)
            if not any(n.state == neighbor and n.f <= neighbor_node.f for n in open_list):
                heapq.heappush(open_list, neighbor_node)
    return None

def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1])
def neighbors(pos): x, y = pos; return [((x+i, y+j), 1) for i, j in [(-1,0),(1,0),(0,-1),(0,1)] if 0<=x+i<=3 and 0<=y+j<=3]

start, goal = (0, 0), (3, 3)
print("Path:", a_star(start, goal, heuristic, neighbors))
